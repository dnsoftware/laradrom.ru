openapi: 3.1.0
info:
  title: laraapi
  version: '1.0'
servers:
  - url: 'http://api.laradrom.local/v1'
paths:
  /pintypes:
    parameters: []
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    id: 142
                    firstName: Alice
                    lastName: Smith
              examples: {}
            application/xml:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: Список не найден
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      x-internal: false
      parameters: []
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /person/profile:
    get:
      summary: Your GET endpoint
      tags: []
      operationId: get-user-profile
      description: |-
        Получение информации пользователя самим залогиненным пользователем.
        Используется в профиле. Доступны все поля
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    id: 0
                    name: string
                    email: user@example.com
                    currentTeamId: 0
                    profilePhotoPath: string
      security:
        - apiKey: []
    parameters: []
  /blog/posts:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples: {}
      operationId: get-posts
      description: Список постов блога
      parameters:
        - schema:
            type: string
          in: query
          name: search
          description: Строка поиска
        - schema:
            type: integer
          in: query
          name: userid
          description: Код пользователя-владельца
    parameters: []
    post:
      summary: ''
      operationId: post-blog-posts
      responses:
        '200':
          description: OK
      description: Создание нового поста
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                    attributes:
                      type: object
                      properties:
                        title:
                          type: string
                        content:
                          type: string
                    relationship:
                      type: object
                      properties:
                        category:
                          type: object
                          properties:
                            data:
                              type: object
                              properties:
                                type:
                                  type: string
                                id:
                                  type: integer
            examples:
              example-1:
                value:
                  data:
                    type: post
                    attributes:
                      title: Заголовок
                      content: Содержимое поста
                    relationship:
                      category:
                        data:
                          type: category
                          id: 1
          application/xml:
            schema:
              type: object
              properties: {}
            examples: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
          text/html:
            schema:
              type: object
              properties: {}
          text/plain:
            schema:
              type: object
              properties: {}
        description: ''
      parameters: []
  /blog/posts/create:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  blogСategories:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
              examples:
                example-1:
                  value:
                    blogСategories:
                      - id: 0
                        name: string
      operationId: get-blog-posts-create
      description: |
        Получение вспомогательных данных (справочник категорий) для страницы с формой добавления поста
      security:
        - apiKey: []
    parameters: []
  /blog/categories/create:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-blog-category-create
    parameters: []
  '/blog/categories/{id}':
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-blog-categories
    patch:
      summary: ''
      operationId: patch-blog-categories
      responses:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: {}
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
                    properties:
                      fieldName:
                        type: object
                        properties:
                          '0':
                            type: string
                          '1':
                            type: string
              examples:
                example-1:
                  value:
                    message: Общее сообщение об ошибке
                    errors:
                      fieldName:
                        '0': Причина непрохождения валидации 1
                        '1': Причина непрохождения валидации 2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples:
              example-1:
                value: {}
        description: ''
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
components:
  schemas:
    User:
      title: LaraUser
      type: object
      description: ''
      examples:
        - id: 0
          name: string
          email: user@example.com
          currentTeamId: 0
          profilePhotoPath: string
      x-internal: false
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          minimum: 0
        name:
          type: string
        email:
          type: string
          format: email
        currentTeamId:
          type: integer
        profilePhotoPath:
          type: string
      required:
        - id
        - name
        - email
    PinItem:
      description: ''
      type: object
      x-examples:
        example-1:
          id: 0
          user_id: string
          title: string
      properties:
        id:
          type: integer
        user_id:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
      required:
        - id
        - user_id
        - title
    BlogPost:
      title: BlogPost
      type: object
      description: '    '
      properties:
        id:
          type: integer
        userId:
          type: integer
        categoryId:
          type: integer
        title:
          type: string
        content:
          type: string
    Categories:
      title: Categories
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        name:
          type: string
  securitySchemes:
    apiKey:
      name: X-XSRF-TOKEN
      type: apiKey
      in: header
  requestBodies: {}
  examples: {}
  parameters: {}
  responses:
    BlogPostResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  type:
                    type: string
                  id:
                    type: integer
                  attributes:
                    type: object
                    properties:
                      userId:
                        type: integer
                      categoryId:
                        type: integer
                      title:
                        type: string
                      content:
                        type: string
