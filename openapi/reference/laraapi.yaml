openapi: 3.1.0
info:
  title: laraapi
  version: '1.0'
servers:
  - url: 'http://api.laradrom.local/v1'
paths:
  /pintypes:
    parameters: []
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    id: 142
                    firstName: Alice
                    lastName: Smith
              examples: {}
            application/xml:
              schema:
                type: object
                properties: {}
          headers: {}
        '404':
          description: Список не найден
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      x-internal: false
      parameters: []
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /pinitems/create:
    post:
      summary: ''
      operationId: post-pinitems-create
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
          in: query
      description: ''
      security:
        - api-key: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples: {}
        description: ''
    parameters: []
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        name:
          type: string
        email:
          type: string
          format: email
        email_verified_at:
          type: string
          example: '1997-10-31 00:00:00'
          format: date-time
      required:
        - id
        - name
        - email
    PinItem:
      description: ''
      type: object
      x-examples:
        example-1:
          id: 0
          user_id: string
          title: string
      properties:
        id:
          type: integer
        user_id:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
      required:
        - id
        - user_id
        - title
  securitySchemes:
    api-key:
      name: API Key
      type: apiKey
      in: cookie
    bearer:
      type: http
      scheme: bearer
    cookie:
      name: API Key
      type: apiKey
      in: cookie
    oauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: ''
          refreshUrl: ''
          scopes: {}
  requestBodies: {}
  examples: {}
  parameters: {}
